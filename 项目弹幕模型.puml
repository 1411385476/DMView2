@startuml
skinparam handwritten true
start
fork
    :初始化一个优先级队列<font size="12" color="green">queue</font>，用来
    存放所有需要播放的弹幕;
    note left
定义弹幕对象的优先级
----
*<b>0~9</b>
待定优先级，预留数字
*<b>10~19</b>
弹幕特权优先级
    end note
    stop
fork again
    :初始化一个列表<font size="12" color="orange">refreshDMList</font>，用来存
    放需要更新到画布上的弹幕;
    while (监听到有数据) is (yes)
        :每隔多少秒刷新一下展示的画面;
    end while(no)
    stop
fork again
    :创建一个SurfaceView，用
    来展示弹幕;
    stop
fork again
    :创建一个弹幕回收库<font size="12" color="blue">dmRecycling</font>，用来
    回收用过的弹幕对象;
    stop
end fork
split
    :收到一个弹幕数据;
    if (dmRecycling.size() == 0) then (yes)
        :创建一个弹幕对象：**dm**;
    else (no)
        :**dm**赋值：从<font size="12" color="blue">dmRecycling</font>获取一个弹幕对象，
        并从列表中移除该对象的引用;
    endif
    :初始化**dm**数据
*头像
*昵称
*消息数据
......|
    :offer(**dm**)放入队列<font size="12" color="green">queue</font>;
split again
:某一个play了的弹幕**dm**;
    while(该弹幕**dm**是否正在运行?) is (yes)
        :更新该弹幕**dm**的位置信息;
    end while(no)
    :<font size="12" color="orange">refreshDMList</font>中移除该**dm**;
    :<font size="12" color="blue">dmRecycling</font>添加该**dm**;
end split

while (\n队列是否有弹幕数据？\n <font size="12" color="green">queue</font>.peek() != null\n) is (有)
    if(<font size="12" color="orange">refreshDMList</font>达到屏幕展示最大数量) then
    stop
    endif
    :移除并得到队头弹幕\n dm = <font size="12" color="green">queue</font>.remove;
:设置弹幕位置数据
*弹幕的开始位置
*弹幕的结束位置
.......|
:添加**dm**到<font size="12" color="orange">refreshDMList</font>;
    :开启该弹幕路径动画\n **dm**.play();

'    while (监听该弹幕**dm**) is (运行)
'    :更新弹幕**dm**当前位置;
'    end while(结束)
end while
stop
@enduml